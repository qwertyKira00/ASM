            Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 1
;Вызов подпрограммы sub_1
020A:0759  E8 0070		;*		call	sub_1			; (07CC)
020A:0759  E8 70 00				db	0E8h, 70h, 00h
;Сохранение регистров
020A:075C  06					push	es
020A:075D  1E					push	ds
020A:075E  50					push	ax
020A:075F  52					push	dx
;Инициализация регистров
020A:0760  B8 0040				mov	ax,40h
020A:0763  8E D8				mov	ds,ax
;Загрузка в ES начала таблицы векторов
020A:0765  33 C0				xor	ax,ax			; Zero register
020A:0767  8E C0				mov	es,ax
;Инкрементация счетчика таймера (инкремент текущего значения 4-байтовой переменной, 
;располагающейся в области данных BIOS по адресу 0000:046Ch - счетчик таймера)
020A:0769  FF 06 006C				inc	word ptr ds:[6Ch]	; (0040:006C=0FCA3h)
;Если счетчик таймера не равен 0, перейти на loc_1
020A:076D  75 04				jnz	loc_1			; Jump if not zero
;Иначе (Если счетчик таймера равен 0) - Инкрементация младших 2 байт счетчика таймера
020A:076F  FF 06 006E				inc	word ptr ds:[6Eh]	; (0040:006E=0Fh)
020A:0773			loc_1:
;Если 0040:006C не равно 0, то сравниваем 0040:006E (0000:046Eh) с 18h (24)
020A:0773  83 3E 006E 18			cmp	word ptr ds:[6Eh],18h	; (0040:006E=0Fh)
020A:0778  75 15				jne	loc_2			; Jump if not equal
;Если 0000:046Eh равно 24, сравниваем 0000:046Ch с 0B0h (176)
020A:077A  81 3E 006C 00B0			cmp	word ptr ds:[6Ch],0B0h	; (0040:006C=0FCA3h)
;Если 0000:046Ch не равно 176, jump loc_2
020A:0780  75 0D				jne	loc_2			; Jump if not equal
;Обнуление счетчика (день прошел)
020A:0782  A3 006E				mov	word ptr ds:[6Eh],ax	; (0040:006E=0Fh)
020A:0785  A3 006C				mov	word ptr ds:[6Ch],ax	; (0040:006C=0FCA3h)
;В ячейку 0040:0070 записывам единицу (индикатор, что наступил новый день)
020A:0788  C6 06 0070 01			mov	byte ptr ds:[70h],1	; (0040:0070=0)
;В младший байт регистра ax заносим 8 
;(т.к. ax до этого был равен 0 => 0 or 8 == 8)
020A:078D  0C 08				or	al,8
020A:078F			loc_2:
;Сохраняем ax в стек (ax = 0, если новый день не наступил, ax = 8, иначе)
020A:078F  50					push	ax
;Ячейка с адресом 0000:0440h содержит время, оставшееся до выключения моторчика.
;Декрементируем это время. 
020A:0790  FE 0E 0040				dec	byte ptr ds:[40h]	; (0040:0040=0B6h)
;Если это время не равно нулю, jump loc_3
020A:0794  75 0B				jnz	loc_3			; Jump if not zero
;Если это время равно нулю, двигатель НГМД отключается.
;Отправка сигнала отключения моторчика.
;Сброс флага отключания моторчика дисковода
020A:0796  80 26 003F F0			and	byte ptr ds:[3Fh],0F0h	; (0040:003F=0)
020A:079B  B0 0C				mov	al,0Ch
020A:079D  BA 03F2				mov	dx,3F2h
020A:07A0  EE					out	dx,al			; port 3F2h, dsk0 contrl output
;Порт 3F2 - адрес порта цифрового упарвления (тип вывод)
;НГМД - накопитель на гибких магнитных дисках
;Порт 3F2h работает только на запись, это порт вывода
;Мы отправляем в этот порт 0C (1100)
;2 бит поднят - разрешение работы контроллера
;3 бит поднят - разрешение прерываний и прямого доступа к памяти
;4-7 биты - значение 1 в каждом разряде вызывает включение соответствующего двигателя НГМД
;(Инф. https://www.frolov-lib.ru/books/bsp/v19/ch1_4.html)
;Инструкция OUT выводит данные из регистра AL или AX (ИСТОЧНИК) в порт ввода-вывода 
;Номер порта должен быть указан в ПРИЁМНИКЕ (dx)
020A:07A1			loc_3:
;Возвращаем в ax содержимое из стека
020A:07A1  58					pop	ax
;Проверка флага PF по адресу 0040:0314.
;0100 - поднят 2 бит, он отвечает за флаг PF - Parity Flag - Флаг чётности)
020A:07A2  F7 06 0314 0004			test	word ptr ds:[314h],4	; (0040:0314=3200h)
020A:07A8  75 0C				jnz	loc_4			; Jump if not zero
;LAHF: Загрузка флагов в регистр АН.  
;Команда LAHF перемещает младший байт регистра флагов EFLAGS в регистр AH.
020A:07AA  9F					lahf				; Load ah from flags
;Обмен ah и al
020A:07AB  86 E0				xchg	ah,al
Записываем ax в стек
020A:07AD  50					push	ax
;Косвенный вызов прерывания 1Ch 
020A:07AE  26: FF 1E 0070			call	dword ptr es:[70h]	; (0000:0070=6C0h)
020A:07B3  EB 03				jmp	short loc_5		; (07B8)
020A:07B5  90					nop
020A:07B6			loc_4:
;Вызов прерывания 1C
;После инициализации системы вектор INT 1Ch указывает на команду IRET, 
;то есть обработчик прерывания INT 1Ch ничего не делает.
020A:07B6  CD 1C				int	1Ch			; Timer break (call each 18.2ms)
020A:07B8			loc_5:
020A:07B8  E8 0011				call	sub_1			; (07CC)
;Сброс контроллера прерываний (mov  al, 20h; out  20h, al) - из методички
;Необходимо отметить, что прерывание int 1Ch вызывается обработчиком прерывания int 8h
;до сброса контроллера прерывания, поэтому во время выполнения
;прерывания int 1Ch все аппаратные прерывания запрещены
;В частности, запрещены прерывания от клавиатуры
020A:07BB  B0 20				mov	al,20h			; ' '
;Конец прерывания

;Инструкция OUT выводит данные из регистра AL или AX (ИСТОЧНИК) в порт ввода-вывода 
;Номер порта должен быть указан в ПРИЁМНИКЕ (20h)
020A:07BD  E6 20				out	20h,al			; port 20h, 8259-1 int command
										;  al = 20h, end of interrupt
;Восстанавливаем значение регистров
020A:07BF  5A					pop	dx
020A:07C0  58					pop	ax
020A:07C1  1F					pop	ds
020A:07C2  07					pop	es
;Выход
020A:07C3  E9 FE99				jmp	$-164h
020A:07C6  C4					db	0C4h
 
;les - загружает первые 16 бит dword по адресу ds:[93E9h] в регистр CX,
;А оставшиеся 16 бит загружает в ES (Т.к. lES (есть еще lDS,...))
							                        ;* No entry point to code
020A:07C7  C4 0E 93E9				les	cx,dword ptr ds:[93E9h]	; (0000:93E9=0A67h) Load 32 bit ptr
020A:07CB  FE					db	0FEh

				sub_1		proc	near
020A:07CC  1E					push	ds
020A:07CD  50					push	ax
020A:07CE  B8 0040				mov	ax,40h
020A:07D1  8E D8				mov	ds,ax

;LAHF: Загрузка флагов в регистр АН.  
;Команда LAHF перемещает младший байт регистра флагов EFLAGS в регистр AH.
020A:07D3  9F					lahf				; Load ah from flags
;Команда TEST - логическое и без изменения операда (Меняются только флаги).
;2400 = 10010000000000. Поднят ли флаг 10ый или 13ый?
;10 - DF - Direction Flag - Флаг направления. 
;Контролирует поведение команд обработки строк. Если установлен в 1, то строки 
;обрабатываются в сторону уменьшения адресов, если сброшен в 0, то наоборот.
;12 и 13 - IOPL - I/O Privilege Level - Уровень приоритета ввода/вывода.
020A:07D4  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:07DA  75 0C				jnz	loc_7			; Jump if not zero
;На все время выполнения команды, снабженной таким префиксом, будет заб-
;локирована шина данных, и если в системе присутствует другой процессор, он не
;сможет обращаться к памяти, пока не закончится выполнение команды с префик-
;сом LOCK.
;LOCK - делаеи следующую команду неделимой.
;and 2 раза обращается к памяти. 1 раз он считывает значение по адресу 0040:0314
;Затем он изменяет его и еще раз обращаяется к памяти на запись.
;Мы делаем ее неделимой, чтобы в этот промежуток, когда мы выполняем непосредственно
;Саму логическую операцию, никто не смог влезть в этот участок памяти (мы его как раз блокируем).
020A:07DC  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020A:07E3			loc_6:
;Команда sahf копирует разряды 7, 6, 4, 2 и 0 регистра АН в регистр флагов процессора, 
;устанавливая тем самым значения флагов SF, ZF, AF, PF и CF соответственно
;Команда не имеет операндов
020A:07E3  9E					sahf				; Store ah into flags
020A:07E4  58					pop	ax
020A:07E5  1F					pop	ds
020A:07E6  EB 03				jmp	short loc_8		; (07EB)
020A:07E8			loc_7:

;cli - сбрасывает флаг IF
;Флаг IF - Interrupt Enable Flag - Флаг разрешения прерываний.
;Если сбросить этот флаг в 0, то процессор перестанет обрабатывать прерывания от внешних устройств.
;Обычно его сбрасывают на короткое время для выполнения критических участков программы.
;(маскируемые - прерывания, которые можно запрещать установкой соответствующих битов в регистре маскирования прерываний)
020A:07E8  FA					cli				; Disable interrupts
020A:07E9  EB F8				jmp	short loc_6		; (07E3)
020A:07EB			loc_8:
;Конец процесса
020A:07EB  C3					retn
				sub_1		endp


				;��������������������������������������������������������������������������
				;                              SUBROUTINE
				;��������������������������������������������������������������������������

				sub_2		proc	near
020A:07EC  1E					push	ds
020A:07ED  50					push	ax
020A:07EE  B8 0040				mov	ax,40h
020A:07F1  8E D8				mov	ds,ax
020A:07F3  9F					lahf				; Load ah from flags
020A:07F4  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:07FA  75 14				jnz	loc_10			; Jump if not zero
020A:07FC  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:0802  75 0C				jnz	loc_10			; Jump if not zero
020A:0804  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:080B			loc_9:
020A:080B  9E					sahf				; Store ah into flags
020A:080C  58					pop	ax
020A:080D  1F					pop	ds
020A:080E  EB 03				jmp	short loc_11		; (0813)
020A:0810			loc_10:
020A:0810  FB					sti				; Enable interrupts
020A:0811  EB F8				jmp	short loc_9		; (080B)
020A:0813			loc_11:
020A:0813  C3					retn
				sub_2		endp

020A:0814  00 90 0000				add	byte ptr ds:[0][bx+si],dl	; (020A:0000=28h)
020A:0818  0000			data_22		dw	0

				;��������������������������������������������������������������������������
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 3

				;                              SUBROUTINE
				;��������������������������������������������������������������������������

				sub_3		proc	near
020A:081A  2E: FF 06 0818			inc	cs:data_22		; (020A:0818=0)
020A:081F  3D 13FF				cmp	ax,13FFh
020A:0822  75 5B				jne	loc_14			; Jump if not equal
020A:0824  83 F9 01				cmp	cx,1
020A:0827  74 40				je	loc_12			; Jump if equal
020A:0829  56					push	si
020A:082A  BE 00A4				mov	si,0A4h
020A:082D  2E: 2B 36 0816			sub	si,word ptr cs:[816h]	; (020A:0816=0)
020A:0832  3B CE				cmp	cx,si
020A:0834  73 3E				jae	loc_13			; Jump if above or =
020A:0836  57					push	di
020A:0837  51					push	cx
020A:0838  52					push	dx
020A:0839  1E					push	ds
020A:083A  06					push	es
020A:083B  8C C2				mov	dx,es
020A:083D  8E DA				mov	ds,dx
020A:083F  BA B000				mov	dx,0B000h
020A:0842  8E C2				mov	es,dx
020A:0844  8B D1				mov	dx,cx
020A:0846  8B F7				mov	si,di
020A:0848  2E: 8B 3E 0816			mov	di,word ptr cs:[816h]	; (020A:0816=0)
020A:084D  FC					cld				; Clear direction
020A:084E  D1 E9				shr	cx,1			; Shift w/zeros fill
020A:0850  F3/ A5				rep	movsw			; Rep when cx >0 Mov [si] to es:[di]
020A:0852  80 D1 00				adc	cl,0
020A:0855  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:0857  2E: 01 16 0816			add	word ptr cs:[816h],dx	; (020A:0816=0)
020A:085C  07					pop	es
020A:085D  1F					pop	ds
020A:085E  5A					pop	dx
020A:085F  59					pop	cx
020A:0860  5F					pop	di
020A:0861  5E					pop	si
020A:0862  F9					stc				; Set carry flag
020A:0863  2E: FF 0E 0818			dec	cs:data_22		; (020A:0818=0)
020A:0868  C3					retn
020A:0869			loc_12:
020A:0869  50					push	ax
020A:086A  B4 0E				mov	ah,0Eh
020A:086C  26: 8A 05				mov	al,es:[di]
020A:086F  E8 0012				call	sub_4			; (0884)
020A:0872  58					pop	ax
020A:0873  C3					retn
020A:0874			loc_13:
020A:0874  5E					pop	si
020A:0875  2E: FF 0E 0818			dec	cs:data_22		; (020A:0818=0)
020A:087A  C4					db	0C4h
020A:087B  C4 42 F9				les	ax,dword ptr [bp+si-7]	; Load 32 bit ptr
020A:087E  C3					retn
020A:087F			loc_14:
020A:087F  80 FC 0E				cmp	ah,0Eh
020A:0882  75 28				jne	loc_15			; Jump if not equal
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 4


				;���� External Entry into Subroutine ��������������������������������������

				sub_4:
020A:0884  56					push	si
020A:0885  2E: 8B 36 0816			mov	si,word ptr cs:[816h]	; (020A:0816=0)
020A:088A  81 FE 00A4				cmp	si,0A4h
020A:088E  73 E4				jae	loc_13			; Jump if above or =
020A:0890  1E					push	ds
020A:0891  BE B000				mov	si,0B000h
020A:0894  8E DE				mov	ds,si
020A:0896  2E: 8B 36 0816			mov	si,word ptr cs:[816h]	; (020A:0816=0)
020A:089B  88 04				mov	[si],al
020A:089D  46					inc	si
020A:089E  2E: 89 36 0816			mov	word ptr cs:[816h],si	; (020A:0816=0)
020A:08A3  1F					pop	ds
020A:08A4  5E					pop	si
020A:08A5  F9					stc				; Set carry flag
020A:08A6  2E: FF 0E 0818			dec	cs:data_22		; (020A:0818=0)
020A:08AB  C3					retn
020A:08AC			loc_15:
020A:08AC  50					push	ax
020A:08AD  B8 13FE				mov	ax,13FEh
020A:08B0  C4					db	0C4h
020A:08B1  C4 42 58				les	ax,dword ptr [bp+si+58h]	; Load 32 bit ptr
020A:08B4  F8					clc				; Clear carry flag
020A:08B5  2E: FF 0E 0818			dec	cs:data_22		; (020A:0818=0)
020A:08BA  C3					retn
				sub_3		endp

020A:08BB  00			data_23		db	0
020A:08BC  00			data_24		db	0
020A:08BD  2E: 80 3E 08BB 02			cmp	cs:data_23,2		; (020A:08BB=0)
020A:08C3  75 05				jne	loc_16			; Jump if not equal
020A:08C5  E8 FF52				call	sub_3			; (081A)
020A:08C8  72 5F				jc	loc_22			; Jump if carry Set
020A:08CA			loc_16:
020A:08CA  2E: 80 3E 08BB 01			cmp	cs:data_23,1		; (020A:08BB=0)
020A:08D0  74 5D				je	loc_24			; Jump if equal
020A:08D2  80 FC 00				cmp	ah,0
020A:08D5  74 30				je	loc_20			; Jump if equal
020A:08D7  80 FC 1C				cmp	ah,1Ch
020A:08DA  77 0B				ja	loc_17			; Jump if above
020A:08DC  80 FC 04				cmp	ah,4
020A:08DF  74 20				je	loc_19			; Jump if equal
020A:08E1  C4					db	0C4h
020A:08E2  C4 42 EB				les	ax,dword ptr [bp+si-15h]	; Load 32 bit ptr
020A:08E5  43					inc	bx
020A:08E6  90					nop
020A:08E7			loc_17:
020A:08E7  80 FC 4F				cmp	ah,4Fh			; 'O'
020A:08EA  75 06				jne	loc_18			; Jump if not equal
020A:08EC  C4					db	0C4h
020A:08ED  C4 BE 73EB				les	di,dword ptr [bp+73EBh]	; Load 32 bit ptr
020A:08F1  90					nop
020A:08F2			loc_18:
020A:08F2  80 FC F0				cmp	ah,0F0h
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 5

020A:08F5  72 35				jb	loc_23			; Jump if below
020A:08F7  80 FC F7				cmp	ah,0F7h
020A:08FA  76 05				jbe	loc_19			; Jump if below or =
020A:08FC  80 FC FA				cmp	ah,0FAh
020A:08FF  75 2B				jne	loc_23			; Jump if not equal
020A:0901			loc_19:
020A:0901  C4					db	0C4h
020A:0902  C4 BE 23EB				les	di,dword ptr [bp+23EBh]	; Load 32 bit ptr
020A:0906  90					nop
020A:0907			loc_20:
020A:0907  2E: C6 06 08BC 01			mov	cs:data_24,1		; (020A:08BC=0)
020A:090D  C4					db	0C4h
020A:090E  C4 BE 9090				les	di,dword ptr [bp-6F70h]	; Load 32 bit ptr
020A:0912  50					push	ax
020A:0913  25 007F				and	ax,7Fh
020A:0916  3C 03				cmp	al,3
020A:0918  76 08				jbe	loc_21			; Jump if below or =
020A:091A  3C 07				cmp	al,7
020A:091C  74 04				je	loc_21			; Jump if equal
020A:091E  58					pop	ax
020A:091F  EB 0E				jmp	short loc_24		; (092F)
020A:0921  90					nop
020A:0922			loc_21:
020A:0922  58					pop	ax
020A:0923  2E: C6 06 08BC 00			mov	cs:data_24,0		; (020A:08BC=0)
020A:0929			loc_22:
020A:0929  E9 FD33				jmp	$-2CAh
020A:092C			loc_23:
020A:092C  F9					stc				; Set carry flag
020A:092D  EB FA				jmp	short loc_22		; (0929)
020A:092F			loc_24:
020A:092F  2E: C6 06 08BC 00			mov	cs:data_24,0		; (020A:08BC=0)
020A:0935  3D 13FF				cmp	ax,13FFh
020A:0938  74 34				je	loc_29			; Jump if equal
020A:093A  80 FC F0				cmp	ah,0F0h
020A:093D  72 0D				jb	loc_25			; Jump if below
020A:093F  80 FC F7				cmp	ah,0F7h
020A:0942  76 BD				jbe	loc_19			; Jump if below or =
020A:0944  80 FC FA				cmp	ah,0FAh
020A:0947  74 B8				je	loc_19			; Jump if equal
020A:0949  EB 19				jmp	short loc_27		; (0964)
020A:094B  90					nop
020A:094C			loc_25:
020A:094C  80 FC 04				cmp	ah,4
020A:094F  74 B0				je	loc_19			; Jump if equal
020A:0951  80 FC 00				cmp	ah,0
020A:0954  75 06				jne	loc_26			; Jump if not equal
020A:0956  C4					db	0C4h
020A:0957  C4 BE 09EB				les	di,dword ptr [bp+9EBh]	; Load 32 bit ptr
020A:095B  90					nop
020A:095C			loc_26:
020A:095C  80 FC 11				cmp	ah,11h
020A:095F  75 03				jne	loc_27			; Jump if not equal
020A:0961  C4					db	0C4h
020A:0962  C4 BE 013D				les	di,dword ptr [bp+13Dh]	; Load 32 bit ptr
020A:0966  4F					dec	di
020A:0967  74 26				jz	loc_32			; Jump if zero
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 6

020A:0969			loc_28:
020A:0969  EA C000:0022		;*		jmp	far ptr loc_76		;*(C000:0022)
020A:0969  EA					db	0EAh
020A:096A  0022 C000				dw	22h, 0C000h
020A:096E			loc_29:
020A:096E  56					push	si
020A:096F  57					push	di
020A:0970  55					push	bp

020A:0971			locloop_30:
020A:0971  BA 0046				mov	dx,46h
020A:0974  52					push	dx
020A:0975  0E					push	cs
020A:0976  BB 0985				mov	bx,985h
020A:0979  53					push	bx
020A:097A  BB 0007				mov	bx,7
020A:097D  B4 0E				mov	ah,0Eh
020A:097F  26: 8A 05				mov	al,es:[di]
020A:0982  47					inc	di
020A:0983  EB E4				jmp	short loc_28		; (0969)
							                        ;* No entry point to code
020A:0985  E2 EA				loop	locloop_30		; Loop if cx > 0

020A:0987  5D					pop	bp
020A:0988  5F					pop	di
020A:0989  5E					pop	si
020A:098A  B8 0001				mov	ax,1
020A:098D			loc_31:
020A:098D  EB 9A				jmp	short loc_22		; (0929)
020A:098F			loc_32:
020A:098F  9C					pushf				; Push flags
020A:0990  0E					push	cs
020A:0991  68					db	68h
020A:0992  96					xchg	si,ax
020A:0993  09 EB				or	bx,bp
020A:0995  D3 3D				sar	word ptr [di],cl	; Shift w/sign fill
020A:0997  4F					dec	di
020A:0998  00 75 18				add	[di+18h],dh
020A:099B  26: F7 05 0040			test	word ptr es:[di],40h
020A:09A0  75 11				jnz	loc_33			; Jump if not zero
020A:09A2  26: 81 25 FF7F			and	word ptr es:[di],0FF7Fh
020A:09A7  26: C7 45 28 0000			mov	word ptr es:[di+28h],0
020A:09AD  26: C7 45 2A 0000			mov	word ptr es:[di+2Ah],0
020A:09B3			loc_33:
020A:09B3  CF					iret				; Interrupt return
							                        ;* No entry point to code
020A:09B4  2E: 80 3E 08BB 02			cmp	cs:data_23,2		; (020A:08BB=0)
020A:09BA  75 05				jne	loc_34			; Jump if not equal
020A:09BC  E8 FE5B				call	sub_3			; (081A)
020A:09BF  72 CC				jc	loc_31			; Jump if carry Set
020A:09C1			loc_34:
020A:09C1  2E: 80 3E 08BB 01			cmp	cs:data_23,1		; (020A:08BB=0)
020A:09C7  74 06				je	loc_35			; Jump if equal
020A:09C9  C4					db	0C4h
020A:09CA  C4 10				les	dx,dword ptr [bx+si]	; Load 32 bit ptr
020A:09CC  E9 FC90				jmp	$-36Dh
020A:09CF			loc_35:
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 7

020A:09CF  80 FC 13				cmp	ah,13h
020A:09D2  75 04				jne	loc_36			; Jump if not equal
020A:09D4  3C FF				cmp	al,0FFh
020A:09D6  74 96				je	loc_29			; Jump if equal
020A:09D8			loc_36:
020A:09D8  EA F000:FF53		;*		jmp	far ptr loc_77		;*(F000:FF53)
020A:09D8  EA					db	0EAh
020A:09D9  FF53 F000				dw	0FF53h, 0F000h
							                        ;* No entry point to code
020A:09DD  CD 10				int	10h			; Video display   ah=functn 00h
										;  set display mode in al
020A:09DF  C4					db	0C4h
020A:09E0  C4					db	0C4h
020A:09E1  FE C4				inc	ah
020A:09E3  C4 11				les	dx,dword ptr [bx+di]	; Load 32 bit ptr
020A:09E5  E9 FC77				jmp	$-386h
020A:09E8  C4					db	0C4h
							                        ;* No entry point to code
020A:09E9  C4 12				les	dx,dword ptr [bp+si]	; Load 32 bit ptr
020A:09EB  E9 FC71				jmp	$-38Ch
020A:09EE  C4					db	0C4h
							                        ;* No entry point to code
020A:09EF  C4 14				les	dx,dword ptr [si]	; Load 32 bit ptr
020A:09F1  E9 FC6B				jmp	$-392h
020A:09F4  0000			data_25		dw	0
020A:09F6  00 00				add	[bx+si],al
020A:09F8  0848			data_26		dw	848h
020A:09FA  00 00				add	[bx+si],al
020A:09FC  0032			data_27		dw	32h
020A:09FE  00 00				add	[bx+si],al
020A:0A00  1E					push	ds
020A:0A01  53					push	bx
020A:0A02  BB 0040				mov	bx,40h
020A:0A05  8E DB				mov	ds,bx
020A:0A07  80 FC 10				cmp	ah,10h
020A:0A0A  E8 FDBF				call	sub_1			; (07CC)
020A:0A0D  72 03				jc	loc_37			; Jump if carry Set
020A:0A0F  E9 00E0				jmp	loc_51			; (0AF2)
020A:0A12			loc_37:
020A:0A12  0A E4				or	ah,ah			; Zero ?
020A:0A14  74 3E				jz	loc_42			; Jump if zero
020A:0A16  FE CC				dec	ah
020A:0A18  74 74				jz	loc_46			; Jump if zero
020A:0A1A  FE CC				dec	ah
020A:0A1C  74 11				jz	loc_39			; Jump if zero
020A:0A1E  FE CC				dec	ah
020A:0A20  74 08				jz	loc_38			; Jump if zero
020A:0A22  FE CC				dec	ah
020A:0A24  74 04				jz	loc_38			; Jump if zero
020A:0A26  FE CC				dec	ah
020A:0A28  74 0A				jz	loc_40			; Jump if zero
020A:0A2A			loc_38:
020A:0A2A  5B					pop	bx
020A:0A2B  1F					pop	ds
020A:0A2C  E9 FC30				jmp	$-3CDh
020A:0A2F			loc_39:
020A:0A2F  A0 0017				mov	al,byte ptr data_2+1	; (020A:0017=0)
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 8

020A:0A32  EB F6				jmp	short loc_38		; (0A2A)
020A:0A34			loc_40:
020A:0A34  56					push	si
020A:0A35  8B 1E 001C				mov	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
020A:0A39  8B F3				mov	si,bx
020A:0A3B  E8 01B9				call	sub_9			; (0BF7)
020A:0A3E  3B 1E 001A				cmp	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A42  74 0B				je	loc_41			; Jump if equal
020A:0A44  89 0C				mov	[si],cx
020A:0A46  89 1E 001C				mov	word ptr ds:[1Ch],bx	; (020A:001C=148Fh)
020A:0A4A  B0 00				mov	al,0
020A:0A4C  5E					pop	si
020A:0A4D  EB DB				jmp	short loc_38		; (0A2A)
020A:0A4F			loc_41:
020A:0A4F  B0 01				mov	al,1
020A:0A51  5E					pop	si
020A:0A52  EB D6				jmp	short loc_38		; (0A2A)
020A:0A54			loc_42:
020A:0A54  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A58  3B 1E 001C				cmp	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
020A:0A5C  75 13				jne	loc_44			; Jump if not equal
020A:0A5E  E8 FD8B				call	sub_2			; (07EC)
020A:0A61  B8 9002				mov	ax,9002h
020A:0A64  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020A:0A66			loc_43:
020A:0A66  E8 FD63				call	sub_1			; (07CC)
020A:0A69  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A6D  3B 1E 001C				cmp	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
020A:0A71			loc_44:
020A:0A71  E8 0190				call	sub_10			; (0C04)
020A:0A74  75 05				jnz	loc_45			; Jump if not zero
020A:0A76  E8 00E3				call	sub_5			; (0B5C)
020A:0A79  EB EB				jmp	short loc_43		; (0A66)
020A:0A7B			loc_45:
020A:0A7B  8B 07				mov	ax,[bx]
020A:0A7D  E8 0177				call	sub_9			; (0BF7)
020A:0A80  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0A84  E8 0129				call	sub_8			; (0BB0)
020A:0A87  72 DD				jc	loc_43			; Jump if carry Set
020A:0A89  E8 00FC				call	sub_6			; (0B88)
020A:0A8C  EB 9C				jmp	short loc_38		; (0A2A)
020A:0A8E			loc_46:
020A:0A8E  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A92  3B 1E 001C				cmp	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
020A:0A96  8B 07				mov	ax,[bx]
020A:0A98  E8 0169				call	sub_10			; (0C04)
020A:0A9B  74 2F				jz	loc_48			; Jump if zero
020A:0A9D  E8 00E8				call	sub_6			; (0B88)
020A:0AA0  E8 010D				call	sub_8			; (0BB0)
020A:0AA3  E8 FD46				call	sub_2			; (07EC)
020A:0AA6  73 45				jnc	loc_50			; Jump if carry=0
020A:0AA8  E8 014C				call	sub_9			; (0BF7)
020A:0AAB  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0AAF  EB DD				jmp	short loc_46		; (0A8E)
020A:0AB1			loc_47:
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 9

020A:0AB1  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0AB5  3B 1E 001C				cmp	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
020A:0AB9  8B 07				mov	ax,[bx]
020A:0ABB  E8 0146				call	sub_10			; (0C04)
020A:0ABE  74 0C				jz	loc_48			; Jump if zero
020A:0AC0  E8 00C5				call	sub_6			; (0B88)
020A:0AC3  E8 00D1				call	sub_7			; (0B97)
020A:0AC6  E8 FD23				call	sub_2			; (07EC)
020A:0AC9  EB 22				jmp	short loc_50		; (0AED)
020A:0ACB  90					nop
020A:0ACC			loc_48:
020A:0ACC  E8 FD1D				call	sub_2			; (07EC)
020A:0ACF  50					push	ax
020A:0AD0  9F					lahf				; Load ah from flags
020A:0AD1  50					push	ax
020A:0AD2  2E: A1 09F4				mov	ax,cs:data_25		; (020A:09F4=0)
020A:0AD6  2E: 3B 06 09FC			cmp	ax,cs:data_27		; (020A:09FC=32h)
020A:0ADB  72 08				jb	loc_49			; Jump if below
020A:0ADD  B4 01				mov	ah,1
020A:0ADF  C4					db	0C4h
020A:0AE0  C4 16 06EB				les	dx,dword ptr ds:[6EBh]	; (020A:06EB=84h) Load 32 bit ptr
020A:0AE4  90					nop
020A:0AE5			loc_49:
020A:0AE5  2E: FF 06 09F8			inc	cs:data_26		; (020A:09F8=90Eh)
020A:0AEA  58					pop	ax
020A:0AEB  9E					sahf				; Store ah into flags
020A:0AEC  58					pop	ax
020A:0AED			loc_50:
020A:0AED  5B					pop	bx
020A:0AEE  1F					pop	ds
020A:0AEF  CA 0002				retf	2			; Return far
020A:0AF2			loc_51:
020A:0AF2  80 EC 10				sub	ah,10h
020A:0AF5  74 2C				jz	loc_53			; Jump if zero
020A:0AF7  FE CC				dec	ah
020A:0AF9  74 B6				jz	loc_47			; Jump if zero
020A:0AFB  FE CC				dec	ah
020A:0AFD  74 03				jz	loc_52			; Jump if zero
020A:0AFF  E9 FF28				jmp	loc_38			; (0A2A)
020A:0B02			loc_52:
020A:0B02  A0 0018				mov	al,byte ptr data_2+2	; (020A:0018=0)
020A:0B05  8A E0				mov	ah,al
020A:0B07  24 04				and	al,4
020A:0B09  51					push	cx
020A:0B0A  B1 05				mov	cl,5
020A:0B0C  D2 E0				shl	al,cl			; Shift w/zeros fill
020A:0B0E  59					pop	cx
020A:0B0F  80 E4 73				and	ah,73h			; 's'
020A:0B12  0A C4				or	al,ah
020A:0B14  8A 26 0096				mov	ah,byte ptr ds:[96h]	; (020A:0096=0)
020A:0B18  80 E4 0C				and	ah,0Ch
020A:0B1B  0A E0				or	ah,al
020A:0B1D  A0 0017				mov	al,byte ptr data_2+1	; (020A:0017=0)
020A:0B20  E9 FF07				jmp	loc_38			; (0A2A)
020A:0B23			loc_53:
020A:0B23  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0B27  3B 1E 001C				cmp	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 10

020A:0B2B  75 13				jne	loc_55			; Jump if not equal
020A:0B2D  E8 FCBC				call	sub_2			; (07EC)
020A:0B30  B8 9002				mov	ax,9002h
020A:0B33  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020A:0B35			loc_54:
020A:0B35  E8 FC94				call	sub_1			; (07CC)
020A:0B38  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0B3C  3B 1E 001C				cmp	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
020A:0B40			loc_55:
020A:0B40  E8 00C1				call	sub_10			; (0C04)
020A:0B43  75 05				jnz	loc_56			; Jump if not zero
020A:0B45  E8 0014				call	sub_5			; (0B5C)
020A:0B48  EB EB				jmp	short loc_54		; (0B35)
020A:0B4A			loc_56:
020A:0B4A  8B 07				mov	ax,[bx]
020A:0B4C  E8 00A8				call	sub_9			; (0BF7)
020A:0B4F  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0B53  E8 0041				call	sub_7			; (0B97)
020A:0B56  E8 002F				call	sub_6			; (0B88)
020A:0B59  E9 FECE				jmp	loc_38			; (0A2A)

				;��������������������������������������������������������������������������
				;                              SUBROUTINE
				;��������������������������������������������������������������������������

				sub_5		proc	near
020A:0B5C  50					push	ax
020A:0B5D  E8 FC8C				call	sub_2			; (07EC)
020A:0B60  B4 02				mov	ah,2
020A:0B62  C4					db	0C4h
020A:0B63  C4 16 1E8B				les	dx,dword ptr ds:[1E8Bh]	; (020A:1E8B=0) Load 32 bit ptr
020A:0B67  1A 00				sbb	al,[bx+si]
020A:0B69  3B 1E 001C				cmp	bx,word ptr ds:[1Ch]	; (020A:001C=148Fh)
020A:0B6D  75 17				jne	loc_59			; Jump if not equal
020A:0B6F  2E: A1 09F4				mov	ax,cs:data_25		; (020A:09F4=0)
020A:0B73  2E: 3B 06 09FC			cmp	ax,cs:data_27		; (020A:09FC=32h)
020A:0B78  73 07				jae	loc_58			; Jump if above or =
020A:0B7A  2E: FF 06 09F8			inc	cs:data_26		; (020A:09F8=988h)
020A:0B7F  EB E4		;*		jmp	short loc_57		;*(0B65)
020A:0B7F  EB E4				db	0EBh,0E4h
020A:0B81			loc_58:
020A:0B81  B4 01				mov	ah,1
020A:0B83  C4					db	0C4h
020A:0B84  C4 16 C358				les	dx,dword ptr ds:[0C358h]	; (020A:C358=80C7h) Load 32 bit ptr

				;���� External Entry into Subroutine ��������������������������������������

				sub_6:
020A:0B88  2E: C7 06 09F4 0000			mov	cs:data_25,0		; (020A:09F4=0)
020A:0B8F  2E: C7 06 09F8 0000			mov	cs:data_26,0		; (020A:09F8=998h)
020A:0B96  C3					retn
				sub_5		endp


				;��������������������������������������������������������������������������
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 11

				;                              SUBROUTINE
				;��������������������������������������������������������������������������

				sub_7		proc	near
020A:0B97  53					push	bx
020A:0B98  50					push	ax
020A:0B99  9F					lahf				; Load ah from flags
020A:0B9A  8B D8				mov	bx,ax
020A:0B9C  58					pop	ax
020A:0B9D  53					push	bx
020A:0B9E  3C F0				cmp	al,0F0h
020A:0BA0  75 06				jne	loc_60			; Jump if not equal
020A:0BA2  0A E4				or	ah,ah			; Zero ?
020A:0BA4  74 02				jz	loc_60			; Jump if zero
020A:0BA6  32 C0				xor	al,al			; Zero register
020A:0BA8			loc_60:
020A:0BA8  8B D8				mov	bx,ax
020A:0BAA  58					pop	ax
020A:0BAB  9E					sahf				; Store ah into flags
020A:0BAC  8B C3				mov	ax,bx
020A:0BAE  5B					pop	bx
020A:0BAF  C3					retn
				sub_7		endp


				;��������������������������������������������������������������������������
				;                              SUBROUTINE
				;��������������������������������������������������������������������������

				sub_8		proc	near
020A:0BB0  53					push	bx
020A:0BB1  50					push	ax
020A:0BB2  9F					lahf				; Load ah from flags
020A:0BB3  8B D8				mov	bx,ax
020A:0BB5  58					pop	ax
020A:0BB6  53					push	bx
020A:0BB7  80 FC E0				cmp	ah,0E0h
020A:0BBA  75 0F				jne	loc_61			; Jump if not equal
020A:0BBC  B4 1C				mov	ah,1Ch
020A:0BBE  3C 0D				cmp	al,0Dh
020A:0BC0  74 23				je	loc_63			; Jump if equal
020A:0BC2  3C 0A				cmp	al,0Ah
020A:0BC4  74 1F				je	loc_63			; Jump if equal
020A:0BC6  B4 35				mov	ah,35h			; '5'
020A:0BC8  EB 1B				jmp	short loc_63		; (0BE5)
020A:0BCA  90					nop
020A:0BCB			loc_61:
020A:0BCB  80 FC 84				cmp	ah,84h
020A:0BCE  77 1E				ja	loc_64			; Jump if above
020A:0BD0  3C F0				cmp	al,0F0h
020A:0BD2  75 07				jne	loc_62			; Jump if not equal
020A:0BD4  0A E4				or	ah,ah			; Zero ?
020A:0BD6  74 0D				jz	loc_63			; Jump if zero
020A:0BD8  EB 14				jmp	short loc_64		; (0BEE)
020A:0BDA  90					nop
020A:0BDB			loc_62:
020A:0BDB  3C E0				cmp	al,0E0h
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 12

020A:0BDD  75 06				jne	loc_63			; Jump if not equal
020A:0BDF  0A E4				or	ah,ah			; Zero ?
020A:0BE1  74 02				jz	loc_63			; Jump if zero
020A:0BE3  32 C0				xor	al,al			; Zero register
020A:0BE5			loc_63:
020A:0BE5  8B D8				mov	bx,ax
020A:0BE7  58					pop	ax
020A:0BE8  9E					sahf				; Store ah into flags
020A:0BE9  8B C3				mov	ax,bx
020A:0BEB  5B					pop	bx
020A:0BEC  F8					clc				; Clear carry flag
020A:0BED  C3					retn
020A:0BEE			loc_64:
020A:0BEE  8B D8				mov	bx,ax
020A:0BF0  58					pop	ax
020A:0BF1  9E					sahf				; Store ah into flags
020A:0BF2  8B C3				mov	ax,bx
020A:0BF4  5B					pop	bx
020A:0BF5  F9					stc				; Set carry flag
020A:0BF6  C3					retn
				sub_8		endp


				;��������������������������������������������������������������������������
				;                              SUBROUTINE
				;��������������������������������������������������������������������������

				sub_9		proc	near
020A:0BF7  43					inc	bx
020A:0BF8  43					inc	bx
020A:0BF9  3B 1E 0082				cmp	bx,word ptr ds:[82h]	; (020A:0082=10h)
020A:0BFD  75 04				jne	loc_65			; Jump if not equal
020A:0BFF  8B 1E 0080				mov	bx,word ptr ds:[80h]	; (020A:0080=1850h)
020A:0C03			loc_65:
020A:0C03  C3					retn
				sub_9		endp


				;��������������������������������������������������������������������������
				;                              SUBROUTINE
				;��������������������������������������������������������������������������

				sub_10		proc	near
020A:0C04  53					push	bx
020A:0C05  51					push	cx
020A:0C06  50					push	ax
020A:0C07  9F					lahf				; Load ah from flags
020A:0C08  50					push	ax
020A:0C09  A0 0017				mov	al,byte ptr data_2+1	; (020A:0017=0)
020A:0C0C  24 70				and	al,70h			; 'p'
020A:0C0E  B1 04				mov	cl,4
020A:0C10  D2 E8				shr	al,cl			; Shift w/zeros fill
020A:0C12  24 07				and	al,7
020A:0C14  8A 1E 0097				mov	bl,byte ptr ds:[97h]	; (020A:0097=0)
020A:0C18  32 D8				xor	bl,al
020A:0C1A  80 E3 07				and	bl,7
020A:0C1D  74 25				jz	loc_66			; Jump if zero
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 13

020A:0C1F  F6 06 0097 40			test	byte ptr ds:[97h],40h	; (020A:0097=0) '@'
020A:0C24  75 1E				jnz	loc_66			; Jump if not zero
020A:0C26  80 0E 0097 40			or	byte ptr ds:[97h],40h	; (020A:0097=0) '@'
020A:0C2B  D2 E3				shl	bl,cl			; Shift w/zeros fill
020A:0C2D  0A C3				or	al,bl
020A:0C2F  B4 03				mov	ah,3
020A:0C31  C4					db	0C4h
020A:0C32  C4 16 2680				les	dx,dword ptr ds:[2680h]	; (020A:2680=7246h) Load 32 bit ptr
020A:0C36  97					xchg	di,ax
020A:0C37  00 F8				add	al,bh
020A:0C39  24 0F				and	al,0Fh
020A:0C3B  08 06 0097				or	byte ptr ds:[97h],al	; (020A:0097=0)
020A:0C3F  80 26 0097 BF			and	byte ptr ds:[97h],0BFh	; (020A:0097=0)
020A:0C44			loc_66:
020A:0C44  58					pop	ax
020A:0C45  9E					sahf				; Store ah into flags
020A:0C46  58					pop	ax
020A:0C47  59					pop	cx
020A:0C48  5B					pop	bx
020A:0C49  C3					retn
				sub_10		endp

020A:0C4A  C4					db	0C4h
							                        ;* No entry point to code
020A:0C4B  C4 18				les	bx,dword ptr [bx+si]	; Load 32 bit ptr
020A:0C4D  E9 FA0F				jmp	$-5EEh
020A:0C50  C4					db	0C4h
							                        ;* No entry point to code
020A:0C51  C4 19				les	bx,dword ptr [bx+di]	; Load 32 bit ptr
020A:0C53  E9 FA09				jmp	$-5F4h
020A:0C56  FCA3			data_28		dw	0FCA3h
020A:0C58  000F			data_29		dw	0Fh
020A:0C5A  01			data_30		db	1
020A:0C5B  E8 FB8E				call	sub_2			; (07EC)
020A:0C5E  80 FC 02				cmp	ah,2
020A:0C61  72 06				jb	loc_67			; Jump if below
020A:0C63  C4					db	0C4h
020A:0C64  C4 1A				les	bx,dword ptr [bp+si]	; Load 32 bit ptr
020A:0C66  E9 F9F6				jmp	$-607h
020A:0C69			loc_67:
020A:0C69  1E					push	ds
020A:0C6A  53					push	bx
020A:0C6B  50					push	ax
020A:0C6C  B8 0040				mov	ax,40h
020A:0C6F  8E D8				mov	ds,ax
020A:0C71  58					pop	ax
020A:0C72  E8 FB57				call	sub_1			; (07CC)
020A:0C75  0A E4				or	ah,ah			; Zero ?
020A:0C77  75 3F				jnz	loc_70			; Jump if not zero
020A:0C79			loc_68:
020A:0C79  A0 0070				mov	al,byte ptr ds:[70h]	; (0040:0070=0)
020A:0C7C  8B 0E 006E				mov	cx,word ptr ds:[6Eh]	; (0040:006E=0Fh)
020A:0C80  8B 16 006C				mov	dx,word ptr ds:[6Ch]	; (0040:006C=0FCA3h)
020A:0C84  2E: 39 0E 0C58			cmp	cs:data_29,cx		; (020A:0C58=0Fh)
020A:0C89  75 35				jne	loc_71			; Jump if not equal
020A:0C8B  2E: 8B 1E 0C56			mov	bx,cs:data_28		; (020A:0C56=0FCA3h)
020A:0C90  3B DA				cmp	bx,dx
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 14

020A:0C92  74 05				je	loc_69			; Jump if equal
020A:0C94  43					inc	bx
020A:0C95  3B DA				cmp	bx,dx
020A:0C97  75 27				jne	loc_71			; Jump if not equal
020A:0C99			loc_69:
020A:0C99  2E: FE 06 0C5A			inc	cs:data_30		; (020A:0C5A=1)
020A:0C9E  2E: 80 3E 0C5A 10			cmp	cs:data_30,10h		; (020A:0C5A=1)
020A:0CA4  72 20				jb	loc_72			; Jump if below
020A:0CA6  E8 FB43				call	sub_2			; (07EC)
020A:0CA9  33 C0				xor	ax,ax			; Zero register
020A:0CAB  2E: FF 0E 0C56			dec	cs:data_28		; (020A:0C56=0FCA3h)
020A:0CB0  C4					db	0C4h
020A:0CB1  C4 5A E8				les	bx,dword ptr [bp+si-18h]	; Load 32 bit ptr
020A:0CB4  16					push	ss
020A:0CB5  FB					sti				; Enable interrupts
020A:0CB6  EB C1				jmp	short loc_68		; (0C79)
020A:0CB8			loc_70:
020A:0CB8  89 16 006C				mov	word ptr ds:[6Ch],dx	; (0040:006C=0FCA3h)
020A:0CBC  89 0E 006E				mov	word ptr ds:[6Eh],cx	; (0040:006E=0Fh)
020A:0CC0			loc_71:
020A:0CC0  2E: C6 06 0C5A 00			mov	cs:data_30,0		; (020A:0C5A=1)
020A:0CC6			loc_72:
020A:0CC6  2E: 89 16 0C56			mov	cs:data_28,dx		; (020A:0C56=0FCA3h)
020A:0CCB  2E: 89 0E 0C58			mov	cs:data_29,cx		; (020A:0C58=0Fh)
020A:0CD0  C6 06 0070 00			mov	byte ptr ds:[70h],0	; (0040:0070=0)
020A:0CD5  5B					pop	bx
020A:0CD6  1F					pop	ds
020A:0CD7  E9 F985				jmp	$-678h
020A:0CDA  C4					db	0C4h
020A:0CDB  C4 1E 7FE9				les	bx,dword ptr ds:[7FE9h]	; (1828:7FE9=2020h) Load 32 bit ptr
020A:0CDF			loc_73:
020A:0CDF  F9					stc				; Set carry flag
020A:0CE0  C4					db	0C4h
020A:0CE1  C4 70 E9				les	si,dword ptr [bx+si-17h]	; Load 32 bit ptr
020A:0CE4  79 F9				jns	loc_73			; Jump if not sign
020A:0CE6  E8 FB03				call	sub_2			; (07EC)
020A:0CE9  CD 4A				int	4Ah			; RTC Alarm occurred
020A:0CEB  EB 01				jmp	short $+3		; delay for I/O
020A:0CED  90					nop
020A:0CEE  EB 01				jmp	short $+3		; delay for I/O
020A:0CF0  90					nop
020A:0CF1  EB 01				jmp	short $+3		; delay for I/O
020A:0CF3  90					nop
020A:0CF4  E8 FAD5				call	sub_1			; (07CC)
020A:0CF7  C4					db	0C4h
020A:0CF8  C4					db	0C4h
020A:0CF9  FE C4				inc	ah
020A:0CFB  C4 71 CD				les	si,dword ptr [bx+di-33h]	; Load 32 bit ptr
020A:0CFE  0A E9				or	ch,cl
020A:0D00  5D					pop	bp
020A:0D01  F9					stc				; Set carry flag
020A:0D02  C4					db	0C4h
020A:0D03  C4 75 CD				les	si,dword ptr [di-33h]	; Load 32 bit ptr
020A:0D06  02 E9				add	ch,cl
020A:0D08  55					push	bp
020A:0D09  F9					stc				; Set carry flag
020A:0D0A  E8 FADF				call	sub_2			; (07EC)
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 15

020A:0D0D  EB 00				jmp	short $+2		; delay for I/O
020A:0D0F  EB 00				jmp	short $+2		; delay for I/O
020A:0D11  EB 00				jmp	short $+2		; delay for I/O
020A:0D13  C4					db	0C4h
020A:0D14  C4					db	0C4h
020A:0D15  FE					db	0FEh
020A:0D16  5A					pop	dx
020A:0D17  59					pop	cx
020A:0D18  1F					pop	ds
020A:0D19  58					pop	ax
020A:0D1A  74 29				jz	loc_74			; Jump if zero
020A:0D1C  2E: 89 36 44FC			mov	word ptr cs:[44FCh],si	; (020A:44FC=1326h)
020A:0D21  DD					db	0DDh
020A:0D22  02 4E 00				add	cl,[bp]
020A:0D25  13 2E 488B				adc	bp,word ptr ds:[488Bh]	; (0000:488B=0D16h)
020A:0D29  49					dec	cx
020A:0D2A  4D					dec	bp
020A:0D2B  45					inc	bp
020A:0D2C  4D					dec	bp
020A:0D2D  20 20				and	[bx+si],ah
020A:0D2F  20 24				and	[si],ah
020A:0D31  00 70 00		;*		add	[bx+si+0],dh
020A:0D31  00 70 00				db	 00h, 70h, 00h
020A:0D34  00 A0 0041				add	byte ptr ds:[41h][bx+si],ah	; (0000:0041=8)
020A:0D38  4C					dec	sp
020A:0D39  00 58 4D				add	[bx+si+4Dh],bl
020A:0D3C  53					push	bx
020A:0D3D  58					pop	ax
020A:0D3E  58					pop	ax
020A:0D3F  58					pop	ax
020A:0D40  58					pop	ax
020A:0D41  30 DE				xor	dh,bl
020A:0D43  04 74				add	al,74h			; 't'
020A:0D45			loc_74:
020A:0D45  00 75 04				add	[di+4],dh
020A:0D48  02 8E 0054				add	cl,[bp+54h]
020A:0D4C  00 00				add	[bx+si],al
020A:0D4E  42					inc	dx
020A:0D4F  05 020A				add	ax,20Ah
020A:0D52  A4					movsb				; Mov [si] to es:[di]
020A:0D53  10 A7 0100				adc	byte ptr ds:[100h][bx],ah	; (0000:0100=8Ah)
020A:0D57  01 01				add	[bx+di],ax
020A:0D59  01 00				add	[bx+si],ax
020A:0D5B  01 00				add	[bx+si],ax
020A:0D5D  01 00				add	[bx+si],ax
020A:0D5F  01 00				add	[bx+si],ax
020A:0D61  000A[00]				db	10 dup (0)
020A:0D6B  02 01				add	al,[bx+di]
020A:0D6D  00					db	0
020A:0D6E  00 00				add	[bx+si],al
020A:0D70  00 2E 1E89				add	byte ptr ds:[1E89h],ch	; (0000:1E89=0)
020A:0D74  16					push	ss
020A:0D75  00 2E 068C				add	byte ptr ds:[68Ch],ch	; (0000:068C=7Ch)
020A:0D79  18 00				sbb	[bx+si],al
020A:0D7B  CB					retf
							                        ;* No entry point to code
020A:0D7C  53					push	bx
           Temp.lst				Sourcer	v5.10   15-Sep-20   3:59 pm   Page 16

020A:0D7D  1E					push	ds
020A:0D7E  2E: C5 1E 0016			lds	bx,dword ptr cs:[16h]	; (020A:0016=0) Load 32 bit ptr
020A:0D83  80 7F 02 10				cmp	byte ptr [bx+2],10h
020A:0D87  C7 47 03 0100			mov	word ptr [bx+3],100h
020A:0D8C  76 05				jbe	loc_75			; Jump if below or =
020A:0D8E  81 4F 03 8003			or	word ptr [bx+3],8003h
020A:0D93			loc_75:
020A:0D93  1F					pop	ds

